{"data":{"wordpressPost":{"content":"<p>Arrays provide a great way to organize related data together. In programming languages, like JavaScript, the simplest form of an array is known as a one-dimensional array or single-dimensional array. But, most of the time, we require to store multiple types of data for each element of an array. Here, JavaScript introduces the concept of a multidimensional array. Basically, it allows us to create a nested array or in simple words, arrays inside an array.</p>\n<p>Today, I’ll explain the usage of JavaScript multidimensional array with the help of step by step examples. For the purpose of this tutorial, I’ll create a multidimensional array of college students. In parent array, each item contains a child array that is used to store the details of a specific student.</p>\n<h2><strong>Usage of JavaScript Multidimensional Array</strong></h2>\n<p>Unlike regular variables, arrays are useful when you want to display a lot of related data with the help of a loop. Let’s quickly have a look at the possible use cases where JavaScript multidimensional array might be suitable.</p>\n<h2><strong>Use case 1: Google Search Engine Results Page</strong></h2>\n<p>Did you notice that Google Search Engine Result displays only 10 records per page? This is a great place to make use of a multidimensional array. Here, they might store data of each record in a separate array and at last group them in a parent array after applying some sorting. This way, it is very easy to loop through the main array in order to display the records on the screen.</p>\n<h2><strong>Use case 2: Facebook’s News Feed</strong></h2>\n<p>Similarly, Facebook’s News Feed is a place which frequently updates with the latest post from your friends, groups or pages you like and some sponsored stuff. It is quite possible that they use a multidimensional array to store the data of posts that should be displayed on the user’s screen.</p>\n<p>Now you might be wondering that the above-mentioned websites process data on the server while JavaScript is used on a client. So, how these use cases apply to us. Let me tell you that with the advent of <a href=\"http://codingsrc.com/node-js-tutorial-for-begginers-in-visual-studio-code/\">Node.js</a> it is possible to use JavaScript programming language on the server-side for developing dynamic web applications.</p>\n<h3><strong>Create a Multidimensional Array in JavaScript</strong></h3>\n<p>There are two different ways to define an array in JavaScript. One method is to make use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\">Array() constructor</a> while the other is known as “array literal notation” where you simply use square brackets to mark the start and end of your array.</p>\n<p>I’ll use the second method because it is the preferred way to create arrays in JavaScript by many professional web developers.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">let students = [\r\n    ['furqan', 1001, 24],\r\n    ['ali', 1002, 35],\r\n    ['john', 1003, 20]\r\n];</code></pre>\n<p>In the above code, I’ve defined an array of arrays to store the data of three students. The first element of each child array contains the student name, second element stores the roll number and at last, I’ve provided the age of each student. Always remember to put a comma after each array item, no matter whether it is the main array or a nested one.</p>\n<p>A point to be noted is that just like variables you need to place string type data inside single or double quotes while numbers can be used as it is inside an array.</p>\n<h3><strong>Access Specific Element</strong></h3>\n<p>Now that we’ve initialized an array, its time to retrieve an existing value from it. To do so, we have to provide the array index where the value exists. In JavaScript arrays, each item is stored in a specific index. An index is a number that starts from zero and keeps infringement by 1 until the end of an array.</p>\n<p>To access and display the age of the second student we have to use the below code snippet.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">document.write(students[1][2]);</code></pre>\n<p>Here, you might be wondering why I’ve provided two separate indexes in square brackets. The reason is that the first index refers to the parent array while the second index is used to specify the item inside the child array.</p>\n<h3><strong>Update Value of Specific Array Index</strong></h3>\n<p>To update a value inside an array, we first need to access that specific array element using its index and then simply initialize it with a new value. Just like any other JavaScript variable.</p>\n<p>In our case, I’ll update the age of the first student using the below code.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">students[0][2] = 30;</code></pre>\n<p>Now to check whether our change is applied to the array element or not, simply display it just like we did in the previous section.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">document.write(students[0][2]);</code></pre>\n<h3><strong>Add New Items in JavaScript Multidimensional Array</strong></h3>\n<p>Once again we’ve two options to add an item inside our array. One is by using the push() method and the other one uses the “square bracket notation”.</p>\n<h4><strong>Using push() method</strong></h4>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">students.push(['ibrar', 1004, 21]);</code></pre>\n<h4><strong>Using Square Brackets</strong></h4>\n<pre class=\"line-numbers\"><code class=\"language-markup\">students[4] = ['Mark', 1005, 50];</code></pre>\n<h3><strong>Delete Element From Multidimensional Array JavaScript</strong></h3>\n<p>JavaScript comes with two functions <code class=\"language-javascript\">shift()</code> and <code class=\"language-javascript\">pop()</code> that allow us to remove first and the last item from an array respectively.</p>\n<p>If you want to remove the first student from the JavaScript multidimensional array then use this code:</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">students.shift();</code></pre>\n<p>Similarly, you can also delete the last array element using the below code.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">students.pop();</code></pre>\n<p>Please note that both of these functions will in turn also update the length of an array.</p>\n<h3><strong>Display JavaScript Multidimensional Array</strong></h3>\n<p>In this section, I’ll guide you about how you can use a JavaScript for loop to iterate through each element of an array. In our case, I will use the existing “students” array and display each student on a separate line.</p>\n<p>You might already be familiar with how to create a “for” loop. But, as we need to automate the retrieval process of each and every item inside an array. So, we can check how many items there are in a specific array by using its length property.</p>\n<pre class=\"line-numbers\"><code class=\"language-javascript\">for(let i = 0; i &lt; students.length; i++) {\r\n    document.write(students[i]);\r\n    document.write('&lt;br /&gt;');\r\n}</code></pre>\n<p><strong>Conclusion</strong></p>\n<p>As you have just seen that JavaScript multidimensional arrays provide a way better organization of data than a bunch of random variables. It is all possible because arrays take consecutive storage space inside our memory.</p>\n<span class=\"tve-leads-two-step-trigger tl-2step-trigger-0\"></span><span class=\"tve-leads-two-step-trigger tl-2step-trigger-0\"></span>","title":"JavaScript Multidimensional Array","featured_media":{"source_url":"https://codingsrc.com/wp-content/uploads/2020/04/javascript-multidimensional-array.png"},"categories":[{"name":"Article"}],"excerpt":"<p>Arrays provide a great way to organize related data together. In programming languages, like JavaScript, the simplest form of an array is known as a one-dimensional array or single-dimensional array. But, most of the time, we require to store multiple types of data for each element of an array. Here, JavaScript introduces the concept of [&hellip;]</p>\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"javascript-multidimensional-array"}}